{"version":3,"sources":["components/Input/Input.jsx","components/Select/Select.jsx","helpers/consts.js","components/Form/Form.jsx","components/Spinner/Spinner.jsx","modules/actions.js","modules/actionTypes.js","components/Form/FormContainer.jsx","components/Preview/Preview.jsx","components/Preview/PreviewContainer.jsx","components/ErrorPage/ErrorPage.jsx","components/ErrorBoundary/ErrorBoundary.jsx","components/Home/Home.jsx","components/Success/Success.jsx","App.jsx","modules/reducer.js","modules/store.js","index.js"],"names":["Input","name","type","onChange","onBlur","value","inputClassNames","labelClassNames","errorMessage","className","autoComplete","htmlFor","defaultProps","Select","options","fieldValue","selectedValue","selectClassNames","showPositionsFieldPlaceholder","hidden","disabled","map","optionField","field","key","position","renderOptions","Form","onSubmit","formFieldsData","errorMessages","formValues","clearFormValues","formFieldClassNames","error","cx","formLabelClassNames","onClick","Spinner","getFormData","payload","request","method","url","process","setFormValue","data","resetFormValue","setErrorMessage","resetErrorMessage","errorField","resetForm","setError","FormContainer","emailValidate","email","test","String","toLowerCase","formFieldValidate","onFormFieldChange","target","props","actions","trim","resetFormFieldValue","onFormFieldBlur","event","preventDefault","history","Object","entries","forEach","formIsValid","push","console","log","fieldName","errorFields","keys","every","this","isLoading","Component","compose","withRouter","connect","state","dispatch","bindActionCreators","formActions","Preview","nickname","positions","ErrorPage","ErrorBoundary","isError","children","errorActions","Home","Success","App","exact","path","component","initialState","reducer","action","middleware","axiosMiddleware","axios","filter","Boolean","store","createStore","applyMiddleware","app","basename","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c51b23ec.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Input = ({\r\n  name,\r\n  type,\r\n  onChange,\r\n  onBlur,\r\n  value,\r\n  inputClassNames,\r\n  labelClassNames,\r\n  errorMessage,\r\n}) => {\r\n  return (\r\n    <>\r\n      <section className=\"form__section\">\r\n        <input\r\n          className={inputClassNames}\r\n          onChange={onChange}\r\n          value={value}\r\n          name={name}\r\n          onBlur={onBlur}\r\n          type={type}\r\n          autoComplete=\"off\"\r\n        />\r\n        <label className={labelClassNames} htmlFor={name}>\r\n          <span className=\"form__label--content\">{name}</span>\r\n        </label>\r\n      </section>\r\n      {errorMessage && <span className=\"form__field--error\">{errorMessage}</span>}\r\n    </>\r\n  );\r\n};\r\n\r\nInput.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  type: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  onBlur: PropTypes.func.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  inputClassNames: PropTypes.string,\r\n  labelClassNames: PropTypes.string,\r\n  errorMessage: PropTypes.string,\r\n};\r\n\r\nInput.defaultProps = {\r\n  inputClassNames: '',\r\n  labelClassNames: '',\r\n  errorMessage: '',\r\n}\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { field, positions } from '../../helpers/consts';\r\n\r\nconst Select = ({\r\n  name,\r\n  onChange,\r\n  onBlur,\r\n  options,\r\n  fieldValue,\r\n  selectedValue,\r\n  selectClassNames,\r\n  labelClassNames,\r\n  errorMessage,\r\n}) => {\r\n  /* eslint-disable no-shadow */\r\n  const renderOptions = options => {\r\n    const selectOptions = options.map(({ field: optionField, options }) => {\r\n      if (name === field) {\r\n        return (\r\n          <option className=\"form__field--option\" key={optionField} value={optionField}>\r\n            {optionField}\r\n          </option>\r\n        );\r\n      }\r\n\r\n      if (name === positions) {\r\n        return options.map(({ position }) => {\r\n          if (fieldValue === optionField) {\r\n            return (\r\n              <option className=\"form__field--option\" key={position} value={position}>\r\n                {position}\r\n              </option>\r\n            );\r\n          }\r\n          return null;\r\n        });\r\n      }\r\n\r\n      return null;\r\n    });\r\n\r\n    return selectOptions;\r\n  };\r\n\r\n  const showPositionsFieldPlaceholder = name === positions && !fieldValue;\r\n\r\n  return (\r\n    <>\r\n      <section className=\"form__section form__section--select\">\r\n        <select\r\n          className={selectClassNames}\r\n          onChange={onChange}\r\n          onBlur={onBlur}\r\n          value={selectedValue}\r\n          name={name}\r\n        >\r\n          <option hidden value=\"\" />\r\n          {showPositionsFieldPlaceholder && (\r\n            <option className=\"form__field--option\" disabled value=\"\">\r\n              fill the empty field above\r\n            </option>\r\n          )}\r\n          {renderOptions(options)}\r\n        </select>\r\n        <label className={labelClassNames} htmlFor={name}>\r\n          <span className=\"form__label--content\">{name}</span>\r\n        </label>\r\n      </section>\r\n      {errorMessage && <span className=\"form__field--error\">{errorMessage}</span>}\r\n    </>\r\n  );\r\n};\r\n\r\nSelect.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  onBlur: PropTypes.func.isRequired,\r\n  fieldValue: PropTypes.string.isRequired,\r\n  selectedValue: PropTypes.string.isRequired,\r\n  options: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      field: PropTypes.string.isRequired,\r\n      options: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          field: PropTypes.string,\r\n          options: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n              position: PropTypes.string.isRequired,\r\n            }),\r\n          ),\r\n        }),\r\n      ),\r\n    }),\r\n  ),\r\n  selectClassNames: PropTypes.string,\r\n  labelClassNames: PropTypes.string,\r\n  errorMessage: PropTypes.string,\r\n};\r\n\r\nSelect.defaultProps = {\r\n  options: [],\r\n  selectClassNames: '',\r\n  labelClassNames: '',\r\n  errorMessage: '',\r\n};\r\n\r\nexport default Select;\r\n","export const baseUrl = process.env.REACT_APP_FORM_DATA_URL;\r\nexport const development = +process.env.REACT_APP_DEVELOPMENT;\r\n\r\nexport const text = 'text';\r\nexport const select = 'select';\r\nexport const field = 'field';\r\nexport const positions = 'positions';\r\n\r\nexport const name = 'name';\r\nexport const nickname = 'nickname';\r\nexport const email = 'email';\r\n\r\nexport const success = 'success';\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cx from 'classnames';\r\nimport { text, select } from '../../helpers/consts';\r\nimport Input from '../Input/Input';\r\nimport Select from '../Select/Select';\r\n\r\nconst Form = ({\r\n  onSubmit,\r\n  formFieldsData,\r\n  errorMessages,\r\n  formValues,\r\n  formValues: { field },\r\n  onChange,\r\n  onBlur,\r\n  clearFormValues,\r\n}) => {\r\n  const formFieldClassNames = (type, value, error) =>\r\n    cx('form__field', {\r\n      'form__field--select': type === select,\r\n      'form__field--error': error,\r\n      'form__field--filled': value,\r\n    });\r\n\r\n  const formLabelClassNames = error =>\r\n    cx('form__label', {\r\n      'form__label--error': error,\r\n    });\r\n\r\n  const renderForm = formData => {\r\n    const form = formData.map(({ name, type, options }) => {\r\n      if (type === text) {\r\n        return (\r\n          <Input\r\n            key={name}\r\n            inputClassNames={formFieldClassNames(type, formValues[name], errorMessages[name])}\r\n            labelClassNames={formLabelClassNames(errorMessages[name])}\r\n            name={name}\r\n            onChange={onChange}\r\n            onBlur={onBlur}\r\n            value={formValues[name]}\r\n            errorMessage={errorMessages[name]}\r\n            type={type}\r\n          />\r\n        );\r\n      }\r\n\r\n      if (type === select) {\r\n        return (\r\n          <Select\r\n            key={name}\r\n            selectClassNames={formFieldClassNames(type, formValues[name], errorMessages[name])}\r\n            labelClassNames={formLabelClassNames(errorMessages[name])}\r\n            name={name}\r\n            onBlur={onBlur}\r\n            errorMessage={errorMessages[name]}\r\n            onChange={onChange}\r\n            options={options}\r\n            selectedValue={formValues[name]}\r\n            fieldValue={field}\r\n          />\r\n        );\r\n      }\r\n\r\n      return null;\r\n    });\r\n\r\n    return form;\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      {renderForm(formFieldsData)}\r\n      <section className=\"form__buttons\">\r\n        <button type=\"submit\" className=\"button button--primary\">\r\n          submit\r\n        </button>\r\n        <button onClick={clearFormValues} type=\"button\" className=\"button button--default\">\r\n          clear values\r\n        </button>\r\n      </section>\r\n    </form>\r\n  );\r\n};\r\n\r\nForm.propTypes = {\r\n  formValues: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    nickname: PropTypes.string.isRequired,\r\n    email: PropTypes.string.isRequired,\r\n    field: PropTypes.string.isRequired,\r\n    positions: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  errorMessages: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    nickname: PropTypes.string.isRequired,\r\n    email: PropTypes.string.isRequired,\r\n    field: PropTypes.string.isRequired,\r\n    positions: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  onSubmit: PropTypes.func.isRequired,\r\n  clearFormValues: PropTypes.func.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  onBlur: PropTypes.func.isRequired,\r\n  formFieldsData: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      type: PropTypes.string.isRequired,\r\n      options: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          field: PropTypes.string.isRequired,\r\n          options: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n              field: PropTypes.string,\r\n              options: PropTypes.arrayOf(\r\n                PropTypes.shape({\r\n                  position: PropTypes.string.isRequired,\r\n                }),\r\n              ),\r\n            }),\r\n          ),\r\n        }),\r\n      ),\r\n    }),\r\n  ),\r\n};\r\n\r\nForm.defaultProps = {\r\n  formFieldsData: [],\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nconst Spinner = () => (\r\n  <section className=\"spinner__container\">\r\n    <div className=\"lds-dual-ring\" />\r\n  </section>\r\n);\r\n\r\nexport default Spinner;\r\n","import {\r\n  GET_FORM_DATA,\r\n  SET_FORM_VALUE,\r\n  RESET_FORM_VALUE,\r\n  SET_ERROR_MESSAGE,\r\n  RESET_ERROR_MESSAGE,\r\n  RESET_FORM,\r\n  SET_ERROR,\r\n} from './actionTypes';\r\nimport { baseUrl } from '../helpers/consts';\r\n\r\nexport const getFormData = () => {\r\n  return {\r\n    type: GET_FORM_DATA,\r\n    payload: {\r\n      request: {\r\n        method: 'get',\r\n        url: baseUrl,\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nexport const setFormValue = (name, value) => {\r\n  return {\r\n    type: SET_FORM_VALUE,\r\n    data: {\r\n      [name]: value,\r\n    },\r\n  };\r\n};\r\n\r\nexport const resetFormValue = (name, value = '') => {\r\n  return {\r\n    type: RESET_FORM_VALUE,\r\n    data: {\r\n      [name]: value,\r\n    },\r\n  };\r\n};\r\n\r\nexport const setErrorMessage = errorMessage => {\r\n  return {\r\n    type: SET_ERROR_MESSAGE,\r\n    data: { errorMessage },\r\n  };\r\n};\r\n\r\nexport const resetErrorMessage = (errorField, value = '') => {\r\n  return {\r\n    type: RESET_ERROR_MESSAGE,\r\n    data: {\r\n      [errorField]: value,\r\n    },\r\n  };\r\n};\r\n\r\nexport const resetForm = () => {\r\n  return {\r\n    type: RESET_FORM,\r\n  };\r\n};\r\n\r\nexport const setError = () => {\r\n  return {\r\n    type: SET_ERROR,\r\n  };\r\n};\r\n","export const GET_FORM_DATA = 'GET_FORM_DATA';\r\nexport const GET_FORM_DATA_SUCCESS = 'GET_FORM_DATA_SUCCESS';\r\nexport const GET_FORM_DATA_FAIL = 'GET_FORM_DATA_FAIL';\r\n\r\nexport const SET_FORM_VALUE = 'SET_FORM_VALUE';\r\nexport const RESET_FORM_VALUE = 'RESET_FORM_VALUE';\r\n\r\nexport const SET_ERROR_MESSAGE = 'SET_ERROR_MESSAGE';\r\nexport const RESET_ERROR_MESSAGE = 'RESET_ERROR_MESSAGE';\r\n\r\nexport const RESET_FORM = 'RESET_FORM';\r\n\r\nexport const SET_ERROR = 'SET_ERROR';\r\n","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router';\r\nimport { compose, bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport Form from './Form';\r\nimport Spinner from '../Spinner/Spinner';\r\nimport { email, field, positions, success } from '../../helpers/consts';\r\n\r\nimport * as formActions from '../../modules/actions';\r\n\r\nclass FormContainer extends Component {\r\n  componentDidMount() {\r\n    const { actions } = this.props;\r\n    actions.resetForm();\r\n    actions.getFormData();\r\n  }\r\n\r\n  /* eslint-disable no-shadow */\r\n  emailValidate = email => {\r\n    const re = /\\S+@\\S+\\.\\S+/;\r\n    return re.test(String(email).toLowerCase());\r\n  };\r\n\r\n  formFieldValidate = (name, value) => {\r\n    let errorMessage = '';\r\n\r\n    if (!value) {\r\n      errorMessage = `${name} is required`;\r\n    } else if (name === email) {\r\n      if (!this.emailValidate(value)) {\r\n        errorMessage = 'enter valid email';\r\n      }\r\n    }\r\n    return errorMessage;\r\n  };\r\n\r\n  onFormFieldChange = ({ target: { name, value } }) => {\r\n    const { actions } = this.props;\r\n    actions.setFormValue(name, value.trim());\r\n    this.resetErrorMessage(name);\r\n\r\n    if (name === field) {\r\n      this.resetFormFieldValue(positions);\r\n    }\r\n  };\r\n\r\n  onFormFieldBlur = ({ target: { name, value } }) => {\r\n    const { actions } = this.props;\r\n    const errorMessages = {};\r\n    errorMessages[name] = this.formFieldValidate(name, value);\r\n    actions.setErrorMessage(errorMessages);\r\n  };\r\n\r\n  onSubmit = event => {\r\n    event.preventDefault();\r\n    const { actions, formValues, history } = this.props;\r\n    const errorMessages = {};\r\n    Object.entries(formValues).forEach(([name, value]) => {\r\n      errorMessages[name] = this.formFieldValidate(name, value);\r\n    });\r\n\r\n    actions.setErrorMessage(errorMessages);\r\n\r\n    if (this.formIsValid(errorMessages)) {\r\n      history.push(success);\r\n      console.log('FORM VALUES:', formValues); // eslint-disable-line no-console\r\n    }\r\n  };\r\n\r\n  resetErrorMessage = name => {\r\n    const { actions, errorMessages } = this.props;\r\n\r\n    if (errorMessages[name]) {\r\n      actions.resetErrorMessage(name);\r\n    }\r\n  };\r\n\r\n  resetFormFieldValue = fieldName => {\r\n    const { actions } = this.props;\r\n    actions.resetFormValue(fieldName);\r\n  };\r\n\r\n  formIsValid = errorFields => {\r\n    return Object.keys(errorFields).every(key => !errorFields[key]);\r\n  };\r\n\r\n  resetForm = () => {\r\n    const { actions } = this.props;\r\n    actions.resetForm();\r\n  };\r\n\r\n  render() {\r\n    const { formFieldsData, formValues, errorMessages, isLoading } = this.props;\r\n\r\n    if (isLoading) {\r\n      return <Spinner />;\r\n    }\r\n\r\n    return (\r\n      <section className=\"section__container\">\r\n        <h2 className=\"section__title\">react form</h2>\r\n        <Form\r\n          onSubmit={this.onSubmit}\r\n          onBlur={this.onFormFieldBlur}\r\n          onChange={this.onFormFieldChange}\r\n          clearFormValues={this.resetForm}\r\n          formFieldsData={formFieldsData}\r\n          formValues={formValues}\r\n          errorMessages={errorMessages}\r\n        />\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  formFieldsData: state.formFieldsData,\r\n  isLoading: state.isLoading,\r\n  formValues: state.formValues,\r\n  errorMessages: state.errorMessages,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  actions: bindActionCreators(formActions, dispatch),\r\n});\r\n\r\nFormContainer.propTypes = {\r\n  formValues: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    nickname: PropTypes.string.isRequired,\r\n    email: PropTypes.string.isRequired,\r\n    field: PropTypes.string.isRequired,\r\n    positions: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  errorMessages: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    nickname: PropTypes.string.isRequired,\r\n    email: PropTypes.string.isRequired,\r\n    field: PropTypes.string.isRequired,\r\n    positions: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  actions: PropTypes.shape({\r\n    setFormValue: PropTypes.func.isRequired,\r\n    resetForm: PropTypes.func.isRequired,\r\n    resetFormValue: PropTypes.func.isRequired,\r\n    setErrorMessage: PropTypes.func.isRequired,\r\n    getFormData: PropTypes.func.isRequired,\r\n    resetErrorMessage: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  formFieldsData: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      type: PropTypes.string.isRequired,\r\n      options: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          field: PropTypes.string.isRequired,\r\n          options: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n              field: PropTypes.string,\r\n              options: PropTypes.arrayOf(\r\n                PropTypes.shape({\r\n                  position: PropTypes.string.isRequired,\r\n                }),\r\n              ),\r\n            }),\r\n          ),\r\n        }),\r\n      ),\r\n    }),\r\n  ),\r\n  isLoading: PropTypes.bool.isRequired,\r\n  history: PropTypes.shape({\r\n    push: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nFormContainer.defaultProps = {\r\n  formFieldsData: [],\r\n};\r\n\r\nexport default compose(withRouter, connect(mapStateToProps, mapDispatchToProps))(FormContainer);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Preview = ({ name, nickname, email, field, positions }) => (\r\n  <>\r\n    <p className=\"section__paragraph\">\r\n      name: <span className=\"section__paragraph--span\">{name}</span>\r\n    </p>\r\n    <p className=\"section__paragraph\">\r\n      nickname: <span className=\"section__paragraph--span\">{nickname}</span>\r\n    </p>\r\n    <p className=\"section__paragraph\">\r\n      email: <span className=\"section__paragraph--span\">{email}</span>\r\n    </p>\r\n    <p className=\"section__paragraph\">\r\n      field: <span className=\"section__paragraph--span\">{field}</span>\r\n    </p>\r\n    <p className=\"section__paragraph\">\r\n      positions: <span className=\"section__paragraph--span\">{positions}</span>\r\n    </p>\r\n  </>\r\n);\r\n\r\nPreview.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  nickname: PropTypes.string.isRequired,\r\n  email: PropTypes.string.isRequired,\r\n  field: PropTypes.string.isRequired,\r\n  positions: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Preview;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport Preview from './Preview';\r\n\r\nconst PreviewContainer = ({ formValues: { name, nickname, email, field, positions } }) => (\r\n  <section className=\"section__container section__container--preview\">\r\n    <h2 className=\"section__title\">current form values</h2>\r\n    <Preview name={name} nickname={nickname} email={email} field={field} positions={positions} />\r\n  </section>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  formValues: state.formValues,\r\n});\r\n\r\nPreviewContainer.propTypes = {\r\n  formValues: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    nickname: PropTypes.string.isRequired,\r\n    email: PropTypes.string.isRequired,\r\n    field: PropTypes.string.isRequired,\r\n    positions: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps)(PreviewContainer);\r\n","import React from 'react';\r\n\r\nconst ErrorPage = () => (\r\n  <section className=\"error\">\r\n    <h1 className=\"error__title\">Something went wrong, Honey</h1>\r\n  </section>\r\n);\r\n\r\nexport default ErrorPage;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport * as errorActions from '../../modules/actions';\r\nimport ErrorPage from '../ErrorPage/ErrorPage';\r\n\r\nclass ErrorBoundary extends Component {\r\n  componentDidCatch() {\r\n    const { actions } = this.props;\r\n    actions.setError();\r\n  }\r\n\r\n  render() {\r\n    const { isError, children } = this.props;\r\n\r\n    if (isError) {\r\n      return <ErrorPage />;\r\n    }\r\n\r\n    return children;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isError: state.isError,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  actions: bindActionCreators(errorActions, dispatch),\r\n});\r\n\r\nErrorBoundary.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  isError: PropTypes.bool.isRequired,\r\n  actions: PropTypes.shape({\r\n    setError: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ErrorBoundary);\r\n","import React from 'react';\r\nimport FormContainer from '../Form/FormContainer';\r\nimport PreviewContainer from '../Preview/PreviewContainer';\r\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\r\n\r\nconst Home = () => (\r\n  <ErrorBoundary>\r\n    <FormContainer />\r\n    <PreviewContainer />\r\n  </ErrorBoundary>\r\n);\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nconst Success = () => (\r\n  <section className=\"section__container\">\r\n    <h2 className=\"section__title section__title--success\">success!</h2>\r\n    <p className=\"section__paragraph section__paragraph--success\">\r\n      Your data has been logged in the console. :&#41;\r\n    </p>\r\n  </section>\r\n);\r\n\r\nexport default Success;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Home from './components/Home/Home';\r\nimport Success from './components/Success/Success';\r\n\r\nconst App = () => (\r\n  <Switch>\r\n    <Route exact path=\"/\" component={Home} />\r\n    <Route path=\"/success\" component={Success} />\r\n  </Switch>\r\n);\r\n\r\nexport default App;\r\n","import {\r\n  GET_FORM_DATA,\r\n  GET_FORM_DATA_SUCCESS,\r\n  GET_FORM_DATA_FAIL,\r\n  SET_FORM_VALUE,\r\n  RESET_FORM_VALUE,\r\n  SET_ERROR_MESSAGE,\r\n  RESET_ERROR_MESSAGE,\r\n  RESET_FORM,\r\n  SET_ERROR,\r\n} from './actionTypes';\r\n\r\nconst initialState = {\r\n  formFieldsData: [],\r\n  isLoading: false,\r\n  isError: false,\r\n  formValues: {\r\n    name: '',\r\n    nickname: '',\r\n    email: '',\r\n    field: '',\r\n    positions: '',\r\n  },\r\n  errorMessages: {\r\n    name: '',\r\n    nickname: '',\r\n    email: '',\r\n    field: '',\r\n    positions: '',\r\n  },\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_FORM_DATA:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case GET_FORM_DATA_SUCCESS:\r\n      return {\r\n        ...state,\r\n        formFieldsData: action.payload.data,\r\n        isLoading: false,\r\n      };\r\n    case GET_FORM_DATA_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n    case SET_FORM_VALUE:\r\n      return {\r\n        ...state,\r\n        formValues: {\r\n          ...state.formValues,\r\n          ...action.data,\r\n        },\r\n      };\r\n    case RESET_FORM_VALUE:\r\n      return {\r\n        ...state,\r\n        formValues: {\r\n          ...state.formValues,\r\n          ...action.data,\r\n        },\r\n      };\r\n    case SET_ERROR_MESSAGE:\r\n      return {\r\n        ...state,\r\n        errorMessages: {\r\n          ...state.errorMessages,\r\n          ...action.data.errorMessage,\r\n        },\r\n      };\r\n    case RESET_ERROR_MESSAGE:\r\n      return {\r\n        ...state,\r\n        errorMessages: {\r\n          ...state.errorMessages,\r\n          ...action.data,\r\n        },\r\n      };\r\n    case RESET_FORM: {\r\n      return {\r\n        ...state,\r\n        formValues: {\r\n          name: '',\r\n          nickname: '',\r\n          email: '',\r\n          field: '',\r\n          positions: '',\r\n        },\r\n        errorMessages: {\r\n          name: '',\r\n          nickname: '',\r\n          email: '',\r\n          field: '',\r\n          positions: '',\r\n        },\r\n      };\r\n    }\r\n    case SET_ERROR:\r\n      return {\r\n        ...state,\r\n        isError: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport axiosMiddleware from 'redux-axios-middleware';\r\nimport logger from 'redux-logger';\r\nimport axios from 'axios';\r\n\r\nimport { development } from '../helpers/consts';\r\nimport reducer from './reducer';\r\n\r\nconst middleware = [development && logger, axiosMiddleware(axios)].filter(Boolean);\r\n\r\nconst store = createStore(reducer, compose(applyMiddleware(...middleware)));\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './scss/index.scss';\r\nimport App from './App';\r\nimport store from './modules/store';\r\n\r\nconst app = (\r\n  <Provider store={store}>\r\n    <HashRouter basename=\"/\">\r\n      <App />\r\n    </HashRouter>\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById('root'));\r\n"],"sourceRoot":""}